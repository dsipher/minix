# 1 "scan.c"

# 39 "/home/charles/xcc/jewel/include/sys/jewel.h"
typedef unsigned long   __caddr_t;
typedef unsigned        __daddr_t;
typedef unsigned        __dev_t;
typedef unsigned        __gid_t;
typedef unsigned        __ino_t;
typedef unsigned        __mode_t;
typedef unsigned        __nlink_t;
typedef long            __off_t;
typedef int             __pid_t;
typedef unsigned long   __size_t;
typedef long            __ssize_t;
typedef long            __time_t;
typedef unsigned        __uid_t;
typedef char            *__va_list;
# 48 "/home/charles/xcc/jewel/include/stdio.h"
typedef __off_t fpos_t;



typedef __size_t size_t;








typedef struct __iobuf
{
    int _count;
    int _fd;
    int _flags;
    int _bufsiz;
    unsigned char *_buf;
    unsigned char *_ptr;
} FILE;

















extern FILE *__iotab[20];
extern FILE __stdin, __stdout, __stderr;








extern int __fillbuf(FILE *);
extern int __flushbuf(int, FILE *);

extern void clearerr(FILE *);
extern int fclose(FILE *);
extern int fflush(FILE *);
extern int fileno(FILE *);
extern char *fgets(char *, int n, FILE *);
extern int fgetpos(FILE *, fpos_t *);
extern int fsetpos(FILE *, fpos_t *);
extern int fprintf(FILE *, const char *, ...);
extern int fputc(int, FILE *);
extern int fputs(const char *, FILE *);
extern FILE *fopen(const char *, const char *);
extern size_t fread(void *, size_t, size_t, FILE *);
extern FILE *freopen(const char *, const char *, FILE *);
extern int fscanf(FILE *, const char *, ...);
extern int fseek(FILE *, long, int);
extern long ftell(FILE *);
extern size_t fwrite(const void *, size_t, size_t, FILE *);
extern char *gets(char *);
extern void perror(const char *s);
extern int printf(const char *, ...);
extern int puts(const char *);
extern int remove(const char *);
extern void rewind(FILE *);
extern int rename(const char *, const char *);
extern int scanf(const char *, ...);
extern int sscanf(const char *, const char *, ...);
extern void setbuf(FILE *, char *);
extern int setvbuf(FILE *, char *, int, size_t);
extern int sprintf(char *, const char *, ...);
extern int ungetc(int, FILE *);
extern int vfprintf(FILE *, const char *, __va_list);
extern int vfscanf(FILE *, const char *, __va_list);
extern int vsprintf(char *, const char *, __va_list);


















extern char *tmpnam(char *);
# 53 "/home/charles/xcc/jewel/include/stdlib.h"
extern void (*__exit_cleanup)(void);
extern void __stdio_cleanup(void);

extern int atoi(const char *);
extern long atol(const char *);

extern void *bsearch(const void *, const void *, size_t, size_t,
                     int (*)(const void *, const void *));







extern void abort(void);
extern void _exit(int);
extern void exit(int);

extern int abs(int);
extern long labs(long);
extern void *calloc(size_t, size_t);
extern void free(void *);
extern char *getenv(const char *);
extern void *malloc(size_t);
extern char *mktemp(char *);
extern void *realloc(void *, size_t);
extern float strtof(const char *, char **);
extern double strtod(const char *, char **);
extern long strtol(const char *, char **, int);
extern unsigned long strtoul(const char *, char **, int);

extern void qsort(void *, size_t, size_t,
                  int (*compar)(const void *, const void *));



extern int rand(void);
extern void srand(unsigned);
# 164 "scan.c"
typedef struct yy_buffer_state *YY_BUFFER_STATE;
# 32 "scan.l"
static char rcsid[] =
    "@(#) $Header: /usr/fsys/odin/a/vern/flex/RCS/scan.l,v 2.9 90/06/27 23:48:34 vern Exp $ (LBL)";
# 44 "/home/charles/xcc/jewel/include/string.h"
extern void *memmove(void *, const void *, size_t);
extern void *memset(void *, int, size_t);



extern void *memchr(const void *, int, size_t);
extern int memcmp(const void *, const void *, size_t);
extern void *memcpy(void *, const void *, size_t);
extern char *strcat(char *, const char *);
extern char *strchr(const char *, int);
extern int strcmp(const char *, const char *);
extern char *strcpy(char *, const char *);
extern char *strerror(int);
extern size_t strlen(const char *);
extern char *strncat(char *, const char *, size_t);
extern int strncmp(const char *, const char *, size_t);
extern char *strncpy(char *, const char *, size_t);
extern char *strrchr(const char *, int);
# 333 "flexdef.h"
struct hash_entry
    {
    struct hash_entry *prev, *next;
    char *name;
    char *str_val;
    int int_val;
    } ;

typedef struct hash_entry *hash_table[];





extern struct hash_entry *ndtbl[101];
extern struct hash_entry *sctbl[101];
extern struct hash_entry *ccltab[101];
# 383 "flexdef.h"
extern int printstats, syntaxerror, eofseen, ddebug, trace, spprdflt;
extern int interactive, caseins, useecs, fulltbl, usemecs;
extern int fullspd, gen_line_dirs, performance_report, backtrack_report, csize;
extern int yymore_used, reject, real_reject, continued_action;




extern int yymore_really_used, reject_really_used;


















extern int datapos, dataline, linenum;
extern FILE *skelfile, *yyin, *temp_action_file, *backtrack_file;
extern char *infilename;
extern char *action_file_name;
extern char **input_files;
extern int num_input_files;
extern char *program_name;










extern int onestate[500], onesym[500];
extern int onenext[500], onedef[500], onesp;
# 457 "flexdef.h"
extern int current_mns, num_rules, current_max_rules, lastnfa;
extern int *firstst, *lastst, *finalst, *transchar, *trans1, *trans2;
extern int *accptnum, *assoc_rule, *state_type, *rule_type, *rule_linenum;









extern int current_state_type;








extern int variable_trailing_context_rules;














extern int numtemps, numprots, protprev[50], protnext[50], prottbl[50];
extern int protcomst[50], firstprot, lastprot, protsave[2000];



















extern int numecs, nextecm[256 + 1], ecgroup[256 + 1], nummecs;






extern int tecfwd[256 + 1], tecbck[256 + 1];

extern int *xlation;
extern int num_xlations;













extern int lastsc, current_max_scs, *scset, *scbol, *scxclu, *sceof, *actvsc;
extern char **scname;
# 572 "flexdef.h"
extern int current_max_dfa_size, current_max_xpairs;
extern int current_max_template_xpairs, current_max_dfas;
extern int lastdfa, lasttemp, *nxt, *chk, *tnxt;
extern int *base, *def, *nultrans, NUL_ec, tblend, firstfree, **dss, *dfasiz;
extern union dfaacc_union
    {
    int *dfaacc_set;
    int dfaacc_state;
    } *dfaacc;
extern int *accsiz, *dhash, numas;
extern int numsnpairs, jambase, jamstate;
extern int end_of_buffer_state;













extern int lastccl, current_maxccls, *cclmap, *ccllen, *cclng, cclreuse;
extern int current_max_ccl_tbl_size;
extern unsigned char *ccltbl;
# 624 "flexdef.h"
extern char *starttime, *endtime, nmstr[1024];
extern int sectnum, nummt, hshcol, dfaeql, numeps, eps2, num_reallocs;
extern int tmpuses, totnst, peakpairs, numuniq, numdup, hshsave;
extern int num_backtracking, bol_needed;

void *allocate_array(), *reallocate_array();
# 667 "flexdef.h"
extern int yylval;







extern void ccladd (int, int);
extern int cclinit ();
extern void cclnegate (int);


extern void list_character_set (FILE*, int[]);





extern void increase_max_dfas ();

extern void ntod ();





extern void ccl2ecl ();


extern int cre8ecs (int[], int[], int);


extern int ecs_from_xlation (int[]);


extern void mkeccl (unsigned char[], int, int[], int[], int, int);


extern void mkechar (int, int[], int[]);




extern void make_tables ();




extern void flexend (int);





extern void action_out ();


extern int all_lower (register unsigned char *);


extern int all_upper (register unsigned char *);


extern void bubble (int [], int);


extern void cshell (unsigned char [], int, int);

extern void dataend ();


extern void flexerror (char[]);


extern void flexfatal (char[]);


extern void lerrif (char[], int);


extern void lerrsf (char[], char[]);


extern void line_directive_out (FILE*);


extern void mk2data (int);

extern void mkdata (int);


extern int myctoi (unsigned char []);


extern void skelout ();


extern void transition_struct_out (int, int);





extern void add_accept (int, int);


extern int copysingl (int, int);


extern void dumpnfa (int);


extern void finish_rule (int, int, int, int);


extern int link_machines (int, int);




extern void mark_beginning_as_normal (register int);


extern int mkbranch (int, int);

extern int mkclos (int);
extern int mkopt (int);


extern int mkor (int, int);


extern int mkposcl (int);

extern int mkrep (int, int, int);


extern int mkstate (int);

extern void new_rule ();





extern void format_pinpoint_message (char[], char[]);


extern void pinpoint_message (char[]);

extern void synerr (char []);
extern int yyparse ();




extern int flexscan ();


extern void set_input_file (char*);

extern int yywrap ();





extern void cclinstal (unsigned char [], int);


extern int ccllookup (unsigned char []);

extern void ndinstal (char[], unsigned char[]);
extern void scinstal (char[], int);


extern int sclookup (char[]);





extern void bldtbl (int[], int, int, int, int);

extern void cmptmps ();
extern void inittbl ();
extern void mkdeftbl ();



extern void mk1tbl (int, int, int, int);


extern void place_state (int*, int, int);


extern void stack1 (int, int, int, int);




extern int yylex ();




extern int read (int, char*, int);
extern int unlink (char*);
extern int write (int, char*, int);
# 113 "scan.l"
struct yy_buffer_state
    {
    FILE *yy_input_file;

    unsigned char *yy_ch_buf;
    unsigned char *yy_buf_pos;


    int yy_buf_size;


    int yy_n_chars;

    int yy_eof_status;






    };

static YY_BUFFER_STATE yy_current_buffer;









static unsigned char yy_hold_char;

static int yy_n_chars;











extern unsigned char *yytext;
extern int yyleng;
extern FILE *yyin, *yyout;

unsigned char *yytext;
int yyleng;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;


typedef int yy_state_type;
static const short int yy_accept[341] =
    {   0,
        0,    0,    0,    0,    0,    0,  119,  119,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  121,   19,    7,   18,   19,   16,
        1,   17,   19,   19,   19,   15,   67,   59,   60,   53,
       67,   66,   51,   67,   67,   67,   50,   49,   67,   52,
      120,   47,  119,  119,   28,   29,   28,   28,   28,   28,
       31,   30,   32,   73,  120,   69,   70,   72,   74,   88,
       89,   86,   85,   87,   75,   77,   76,   75,   81,   80,

       81,   81,   83,   83,   83,   84,   99,  104,  103,  105,
      105,  100,  100,  100,   97,   98,  120,   33,   91,   90,
       22,   24,   23,  107,  109,  108,  111,  113,  114,  115,
       95,   95,   96,   95,   95,   95,   95,   38,   35,   34,
       38,   38,   44,   42,   45,   44,   44,   41,   41,   41,
       40,   41,    7,   18,    0,   16,    1,   17,    0,    2,
       14,    8,    0,   12,    4,    0,    0,    5,    0,    3,
       15,   59,   60,    0,    0,   56,    0,    0,    0,  117,
      117,  117,   55,   54,   55,   50,   49,   63,   50,    0,
       47,   46,  119,  119,   28,   28,   28,   28,   28,   31,

       30,   71,   72,   85,  118,  118,  118,   78,   79,   82,
       99,    0,  102,    0,  101,  100,  100,  100,    0,   33,
       22,   20,  107,  106,  111,  112,   95,   95,   95,   92,
       95,   95,   95,   38,   35,   38,   38,   42,    0,   43,
       43,   43,   42,   40,    0,   13,   14,    8,    8,    0,
       12,    4,    0,    0,    0,    5,    0,    6,   57,    0,
       58,    0,   64,    0,    0,  117,  117,   55,   55,   65,
       63,   28,   28,   28,   25,    0,  118,  118,  100,  100,
        0,   21,   92,   92,   95,   95,   38,   38,    0,   39,
       43,   43,    0,   11,    4,    0,   11,    0,    0,    5,

        0,    0,    0,  117,   28,   28,  118,  100,  100,   95,
       95,   38,   38,   43,    0,    9,    0,    0,    0,   28,
       28,  100,  100,   95,   95,   38,   38,    0,    0,   26,
       27,   93,   94,   93,   94,   36,   37,   10,   62,    0
    } ;

static const unsigned char yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    8,    9,    1,   10,   11,
       11,   12,   11,   13,   14,   11,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,    1,    1,   17,
        1,   18,   11,    1,   24,   25,   26,   27,   28,   29,
       23,   23,   23,   30,   31,   23,   32,   33,   34,   31,
       23,   35,   36,   37,   38,   23,   23,   39,   40,   23,
       19,   20,   21,   22,   23,    1,   24,   25,   26,   27,

       28,   29,   23,   23,   23,   30,   31,   23,   32,   33,
       34,   31,   23,   35,   36,   37,   38,   23,   23,   39,
       40,   23,   41,   42,   43,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const unsigned char yy_meta[44] =
    {   0,
        1,    2,    3,    2,    2,    4,    1,    1,    1,    5,
        1,    6,    1,    7,    5,    8,    1,    1,    1,    9,
       10,    1,   11,   12,   12,   12,   12,   12,   12,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        5,    1,   13
    } ;

static const short int yy_base[404] =
    {   0,
        0,   43,   85,  126, 1371, 1370, 1369, 1353,  168, 1346,
      104,  108,  211,    0, 1332, 1320,  120,  252,   95,  119,
      137,  144,  100,  141,  295,    0, 1327, 1323,  113,  336,
      254,  255,  257,  258,  253,  268,  379,    0,  338,  421,
        0,    0,  273,  460, 1325, 1442,  281, 1442, 1287,    0,
      287, 1442, 1279,  472, 1257,    0, 1442,  425, 1442, 1442,
      147, 1442, 1239, 1235,   78,  513,  433, 1442,   83, 1442,
     1248,    0, 1247, 1442,    0, 1442,    0, 1218, 1205, 1194,
        0,  342, 1442, 1442, 1442, 1442, 1202,    0, 1442, 1442,
     1442, 1442, 1201, 1442, 1442, 1442, 1442,   79, 1442, 1442,

      103, 1198, 1442,    0,  248, 1442,    0, 1442, 1442,  252,
     1199,    0, 1173, 1158, 1442, 1442, 1185, 1442, 1442, 1442,
        0, 1442, 1170,    0, 1442, 1152,    0, 1442, 1442,    0,
        0,  346, 1442, 1123,    0, 1125, 1105,    0,  352, 1442,
     1116, 1103, 1442,  356, 1442, 1100,  329, 1442,  360, 1093,
     1101,  333,  441, 1442,  445,    0,  449, 1442, 1101, 1442,
      365,  453, 1094,  466,    0,  480,  330,    0, 1095, 1442,
        0,  555, 1442, 1044, 1077, 1442, 1051,  133,  456, 1442,
     1059,    0,    0, 1442,  584,  563, 1442,    0, 1442, 1071,
        0, 1442, 1063, 1442,    0,    0, 1010, 1007,  627,    0,

      484, 1442,    0,  998, 1442,  992,    0, 1442, 1442, 1442,
        0,  421, 1442,    0, 1442,    0,  971,  964,  992, 1442,
        0,  962,    0, 1442,    0, 1442,    0,  488,  921,  670,
        0,  717,  714,    0,  497,  715,  712,  569,  573, 1442,
      727,    0,  577,  726,  581, 1442,  585,    0,  590,  738,
      597,    0,  712,  683,  691,    0,  670, 1442, 1442,  623,
     1442,  591, 1442,  458,  702,  590,    0,    0,    0, 1442,
        0,  576,  569,    0, 1442,  593,  575,    0,  560,  546,
      567, 1442,    0,    0,  541,  529,  534,  527,  730, 1442,
      500,    0,  509, 1442,    0,  734, 1442,  468,  467,    0,

      462,  704,  724, 1442,  461,  438, 1442,  440,  425,  433,
      405,  413,  398, 1442,  404, 1442,  359,  259,  332,  338,
      346,  334,  331,  257,  253,  226,  137,  133,   81,    0,
        0,    0,    0,    0,    0,    0,    0, 1442, 1442, 1442,
      753,  766,  779,  792,  805,  818,  831,  844,  857,  870,
      883,  896,  909,  922,  935,  948,  955,  967,  980,  986,
      998, 1011, 1024, 1037, 1050, 1063, 1070, 1082, 1089, 1101,
     1114, 1127, 1140, 1150, 1157, 1169, 1182, 1195, 1208, 1221,
     1234, 1241, 1253, 1266, 1279, 1282, 1284, 1296, 1309, 1315,
     1327, 1339, 1345, 1357, 1363, 1375, 1382, 1388, 1393, 1405,

     1411, 1423, 1429
    } ;

static const short int yy_def[404] =
    {   0,
      340,  340,  341,  341,  342,  342,  343,  343,  340,    9,
      344,  344,  340,   13,  345,  345,  346,  346,  347,  347,
      348,  348,  349,  349,  340,   25,  350,  350,  345,  345,
      351,  351,  352,  352,  353,  353,  340,   37,  354,  354,
       37,   37,  355,  356,  340,  340,  340,  340,  340,  357,
      340,  340,  358,  359,  340,  360,  340,  340,  340,  340,
      340,  340,  340,  361,  362,  340,  340,  340,  340,  340,
      363,  364,  365,  340,  366,  340,  367,  367,  367,  366,
      368,  340,  340,  340,  340,  340,  340,  369,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  362,  340,  340,

      370,  371,  340,  372,  362,  340,  373,  340,  340,  374,
      340,  375,  375,  375,  340,  340,  376,  340,  340,  340,
      377,  340,  340,  378,  340,  340,  379,  340,  340,  380,
      381,  381,  340,  381,  382,  382,  382,  383,  340,  340,
      383,  383,  340,  340,  340,  340,  384,  340,  340,  340,
      340,  384,  340,  340,  340,  357,  340,  340,  358,  340,
      340,  385,  340,  340,  386,  340,  340,  387,  388,  340,
      360,  340,  340,  340,  389,  340,  340,  361,  361,  340,
      340,  390,  391,  340,  391,  340,  340,  392,  340,  363,
      364,  340,  365,  340,  366,  367,  367,  367,  340,  368,

      340,  340,  369,  340,  340,  340,  393,  340,  340,  340,
      373,  374,  340,  374,  340,  375,  375,  375,  376,  340,
      377,  394,  378,  340,  379,  340,  381,  381,  381,  340,
      382,  382,  382,  383,  340,  383,  383,  340,  340,  340,
      340,  395,  340,  340,  340,  340,  340,  385,  385,  396,
      340,  397,  396,  340,  340,  398,  388,  340,  340,  389,
      340,  340,  340,  361,  361,  340,  399,  391,  185,  340,
      392,  367,  367,  199,  340,  400,  340,  401,  375,  375,
      394,  340,  230,  402,  382,  382,  383,  383,  340,  340,
      340,  403,  396,  340,  397,  396,  340,  340,  340,  398,

      340,  361,  265,  340,  367,  367,  340,  375,  375,  382,
      382,  383,  383,  340,  340,  340,  340,  361,  361,  367,
      367,  375,  375,  382,  382,  383,  383,  340,  340,  367,
      367,  375,  375,  382,  382,  383,  383,  340,  340,    0,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,

      340,  340,  340
    } ;

static const short int yy_nxt[1486] =
    {   0,
       46,   47,   48,   47,   47,   46,   46,   46,   49,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       46,   46,   46,   46,   51,   52,   51,   51,   46,   53,
       46,   54,   46,   46,   46,   46,   46,   55,   46,   46,
       46,   46,   46,   46,   46,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   46,   46,   46,   58,   59,   58,   58,
       60,  188,   61,  181,  181,   62,   62,   96,  339,   62,

       97,   63,   85,   64,   65,   82,   83,   82,   82,   82,
       83,   82,   82,  104,   98,  119,  182,  182,  206,  105,
      106,   96,   91,  189,   97,   66,   62,   67,   68,   67,
       67,   60,   92,   61,   69,   93,   62,   62,   98,   85,
       62,  207,   63,   85,   64,   65,   85,   70,  176,  176,
      100,  176,  179,  263,  104,  120,  101,  100,  102,  338,
      105,  106,   94,  101,  337,  102,   66,   62,   75,   75,
       76,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,

       77,   77,   78,   77,   77,   77,   77,   79,   75,   75,
       75,   84,   84,   85,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   86,   84,   84,   84,   84,   87,   84,
       84,   84,   84,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   84,   84,   84,   91,  128,  122,  122,  129,  125,
      125,  213,  336,  181,   92,  123,  123,   93,  126,  126,
      128,  214,  130,  129,  144,  145,  144,  144,  179,  263,
      335,  146,  153,  154,  153,  153,  182,  130,  157,  158,
      157,  157,  147,  334,   94,  107,  107,  108,  107,  107,

      109,  107,  107,  107,  110,  107,  107,  107,  107,  111,
      107,  107,  107,  107,  107,  107,  107,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  113,
      112,  112,  112,  112,  114,  115,  107,  116,  119,  139,
      140,  139,  139,  201,  241,  201,  201,  228,  241,  228,
      228,  179,  263,  235,  229,  235,  235,  238,  333,  238,
      238,  243,  254,  243,  243,  255,  247,  242,  247,  247,
      332,  242,  141,  331,  330,  244,  329,  142,  120,  131,
      132,  133,  132,  132,  131,  131,  131,  134,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      131,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  136,  135,  135,  135,  135,  137,  131,
      131,  131,  139,  140,  139,  139,  172,  173,  172,  172,
      213,  328,  327,  174,  186,  187,  186,  186,  326,  325,
      214,  174,  153,  154,  153,  153,  245,  246,  245,  245,
      157,  158,  157,  157,  249,  141,  249,  249,  324,  323,
      142,  149,  145,  149,  149,  322,  175,  251,  150,  251,
      251,  264,  321,  302,  175,  151,  178,  179,  263,  152,
      162,  245,  246,  245,  253,  201,  320,  201,  201,  228,
      317,  228,  228,  316,  265,  163,  229,  164,  235,  163,

      235,  235,  163,  315,  163,  163,  164,  165,  166,  167,
      168,  294,  169,  183,  183,  240,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  184,  183,
      183,  183,  183,  183,  183,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  183,  183,  183,  172,  173,  172,  172,
      313,  312,  311,  174,  186,  187,  186,  186,  310,  282,
      238,  174,  238,  238,  289,  290,  289,  289,  243,  309,
      243,  243,  245,  246,  245,  245,  247,  308,  247,  247,
      205,  249,  244,  249,  249,  275,  175,  269,  251,  269,

      251,  251,  306,  305,  175,  180,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  301,  261,  270,  274,  274,  275,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  274,  274,  274,
      283,  283,  258,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  284,  284,  284,  284,  284,  284,  284,  284,

      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      283,  283,  283,  296,  297,  296,  296,  303,  299,  318,
      298,  179,  263,  179,  263,  303,  303,  303,  303,  303,
      303,  289,  290,  289,  289,  296,  297,  296,  296,  319,
      294,  244,  291,  288,  287,  286,  285,  319,  319,  319,
      319,  319,  319,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   81,   81,   81,   81,   81,   81,   81,   81,

       81,   81,   81,   81,   81,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  124,  124,  124,  124,

      124,  124,  124,  124,  124,  124,  124,  124,  124,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  156,  156,  230,  282,  156,  156,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  171,  171,  220,  280,  171,  171,  178,  178,

      279,  178,  178,  178,  178,  178,  178,  277,  178,  178,
      178,  180,  180,  204,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  192,  273,  272,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  195,  195,  194,  195,  195,  195,  195,
      195,  195,  195,  191,  266,  195,  196,  196,  262,  261,
      196,  196,  200,  200,  259,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  203,  203,  258,  250,  203,

      203,  205,  205,  160,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  208,  208,  244,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  210,  210,  239,
      210,  210,  210,  210,  210,  210,  239,  210,  210,  210,
      211,  211,  237,  236,  233,  211,  211,  211,  211,  211,
      212,  212,  232,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  216,  216,  230,  224,  216,  216,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  221,  221,  222,  221,  221,  220,  221,  221,
      221,  221,  221,  221,  221,  223,  223,  218,  223,  223,

      217,  223,  223,  223,  223,  223,  223,  223,  225,  225,
      215,  209,  225,  225,  225,  225,  204,  225,  225,  225,
      225,  226,  226,  202,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  227,  227,  199,  227,  227,  227,
      227,  227,  227,  227,  198,  197,  227,  231,  231,  194,
      191,  231,  231,  234,  179,  177,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  240,  240,  170,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  248,
      248,  160,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  252,  252,  256,  256,  257,  257,  257,  257,

      257,  257,  257,  257,  257,  257,  257,  257,  257,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  267,  155,  340,  118,  267,  268,  268,  118,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  271,
      271,   89,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  278,   89,   80,   74,  278,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      292,   74,   72,   72,  292,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  295,  295,
      340,  340,  295,  295,  300,  300,  340,  340,  300,  300,

      304,  340,  340,  340,  304,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  307,  340,
      340,  340,  307,  284,  284,  340,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  314,  340,  340,  340,
      314,   45,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340
    } ;

static const short int yy_chk[1486] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    3,    3,    3,    3,
        3,   69,    3,   65,   98,    3,    3,   19,  329,    3,

       19,    3,   23,    3,    3,   11,   11,   11,   11,   12,
       12,   12,   12,   23,   19,   29,   65,   98,  101,   23,
       23,   20,   17,   69,   20,    3,    3,    4,    4,    4,
        4,    4,   17,    4,    4,   17,    4,    4,   20,   21,
        4,  101,    4,   24,    4,    4,   22,    4,   61,   61,
       21,   61,  178,  178,   24,   29,   21,   22,   21,  328,
       24,   24,   17,   22,  327,   22,    4,    4,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   18,   35,   31,   32,   35,   33,
       34,  110,  326,  105,   18,   31,   32,   18,   33,   34,
       36,  110,   35,   36,   43,   43,   43,   43,  318,  318,
      325,   43,   47,   47,   47,   47,  105,   36,   51,   51,
       51,   51,   43,  324,   18,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   30,   39,
       39,   39,   39,   82,  147,   82,   82,  132,  152,  132,
      132,  319,  319,  139,  132,  139,  139,  144,  323,  144,
      144,  149,  167,  149,  149,  167,  161,  147,  161,  161,
      322,  152,   39,  321,  320,  149,  317,   39,   30,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   40,   40,   40,   40,   58,   58,   58,   58,
      212,  315,  313,   58,   67,   67,   67,   67,  312,  311,
      212,   67,  153,  153,  153,  153,  155,  155,  155,  155,
      157,  157,  157,  157,  162,   40,  162,  162,  310,  309,
       40,   44,   44,   44,   44,  308,   58,  164,   44,  164,
      164,  179,  306,  264,   67,   44,  179,  264,  264,   44,
       54,  166,  166,  166,  166,  201,  305,  201,  201,  228,
      301,  228,  228,  299,  179,   54,  228,   54,  235,   54,

      235,  235,   54,  298,   54,   54,   54,   54,   54,   54,
       54,  293,   54,   66,   66,  291,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,  172,  172,  172,  172,
      288,  287,  286,  172,  186,  186,  186,  186,  285,  281,
      238,  186,  238,  238,  239,  239,  239,  239,  243,  280,
      243,  243,  245,  245,  245,  245,  247,  279,  247,  247,
      277,  249,  243,  249,  249,  276,  172,  185,  251,  185,

      251,  251,  273,  272,  186,  266,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  262,  260,  185,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      230,  230,  257,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,

      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  253,  253,  253,  253,  265,  255,  302,
      254,  265,  265,  302,  302,  265,  265,  265,  265,  265,
      265,  289,  289,  289,  289,  296,  296,  296,  296,  303,
      250,  244,  241,  237,  236,  233,  232,  303,  303,  303,
      303,  303,  303,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  344,  344,  344,  344,  344,  344,  344,  344,

      344,  344,  344,  344,  344,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  352,  352,  352,  352,

      352,  352,  352,  352,  352,  352,  352,  352,  352,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  357,  357,  229,  222,  357,  357,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  360,  360,  219,  218,  360,  360,  361,  361,

      217,  361,  361,  361,  361,  361,  361,  206,  361,  361,
      361,  362,  362,  204,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  364,  198,  197,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  366,  366,  193,  366,  366,  366,  366,
      366,  366,  366,  190,  181,  366,  367,  367,  177,  175,
      367,  367,  368,  368,  174,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  369,  369,  169,  163,  369,

      369,  370,  370,  159,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  371,  371,  151,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  372,  372,  150,
      372,  372,  372,  372,  372,  372,  146,  372,  372,  372,
      373,  373,  142,  141,  137,  373,  373,  373,  373,  373,
      374,  374,  136,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  375,  375,  134,  126,  375,  375,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  377,  377,  123,  377,  377,  117,  377,  377,
      377,  377,  377,  377,  377,  378,  378,  114,  378,  378,

      113,  378,  378,  378,  378,  378,  378,  378,  379,  379,
      111,  102,  379,  379,  379,  379,   93,  379,  379,  379,
      379,  380,  380,   87,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  381,  381,   80,  381,  381,  381,
      381,  381,  381,  381,   79,   78,  381,  382,  382,   73,
       71,  382,  382,  383,   64,   63,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  384,  384,   55,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  385,
      385,   53,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  386,  386,  387,  387,  388,  388,  388,  388,

      388,  388,  388,  388,  388,  388,  388,  388,  388,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  390,   49,   45,   28,  390,  391,  391,   27,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  392,
      392,   16,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  393,   15,   10,    8,  393,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      395,    7,    6,    5,  395,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  397,  397,
        0,    0,  397,  397,  398,  398,    0,    0,  398,  398,

      399,    0,    0,    0,  399,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  401,    0,
        0,    0,  401,  402,  402,    0,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  403,    0,    0,    0,
      403,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340
    } ;

static yy_state_type yy_last_accepting_state;
static unsigned char *yy_last_accepting_cpos;












static unsigned char *yy_c_buf_p = (unsigned char *) 0;
static int yy_init = 1;
static int yy_start = 0;




static int yy_did_buffer_switch_on_eof;

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state );
static int yy_get_next_buffer ( void );
static void yyunput ( unsigned char c, unsigned char *buf_ptr );
void yyrestart ( FILE *input_file );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer );
void yy_load_buffer_state ( void );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size );
void yy_delete_buffer ( YY_BUFFER_STATE b );
void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file );






static int input ( void );


int flexscan()
    {
    register yy_state_type yy_current_state;
    register unsigned char *yy_cp, *yy_bp;
    register int yy_act;


    static int bracelevel, didadef;
    int i, indented_code, checking_used, new_xlation;
    int doing_codeblock = 0;
    unsigned char nmdef[1024], myesc();


    if ( yy_init )
	{
	;

	if ( ! yy_start )
	    yy_start = 1;

	if ( ! yyin )
	    yyin = (&__stdin);

	if ( ! yyout )
	    yyout = (&__stdout);

	if ( yy_current_buffer )
	    yy_init_buffer( yy_current_buffer, yyin );
	else
	    yy_current_buffer = yy_create_buffer( yyin, (8192 * 2) );

	yy_load_buffer_state();

	yy_init = 0;
	}

    while ( 1 )
	{
	yy_cp = yy_c_buf_p;


	*yy_cp = yy_hold_char;




	yy_bp = yy_cp;

	yy_current_state = yy_start;
	if ( yy_bp[-1] == '\n' )
	    ++yy_current_state;
yy_match:
	do
	    {
	    register unsigned char yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 341 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 340 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;

yy_find_action:
	yy_act = yy_accept[yy_current_state];

	yytext = yy_bp; yyleng = yy_cp - yy_bp; yy_hold_char = *yy_cp; *yy_cp = '\0'; yy_c_buf_p = yy_cp;;
	;

do_action:


	switch ( yy_act )
	    {
	    case 0:

	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
# 90 "scan.l"
indented_code = 1; yy_start = 1 + 2 *(4);
	break;
case 2:
# 91 "scan.l"
++linenum;
	break;
case 3:
# 92 "scan.l"
(void) fwrite( (char *) yytext, yyleng, 1, yyout ); yy_start = 1 + 2 *(15);
	break;
case 4:
# 93 "scan.l"
return ( 260 );
	break;
case 5:
# 94 "scan.l"
return ( 261 );
	break;
case 6:
# 95 "scan.l"
{
			++linenum;
			line_directive_out( (&__stdout) );
			indented_code = 0;
			yy_start = 1 + 2 *(4);
			}
	break;
case 7:
# 102 "scan.l"
return ( 262 );
	break;
case 8:
# 104 "scan.l"
{
			sectnum = 2;
			line_directive_out( (&__stdout) );
			yy_start = 1 + 2 *(2);
			return ( 259 );
			}
	break;
case 9:
# 111 "scan.l"
{
	pinpoint_message( "warning - %%used/%%unused have been deprecated" );
			checking_used = 1; yy_start = 1 + 2 *(19);
			}
	break;
case 10:
# 115 "scan.l"
{
			checking_used = 2; yy_start = 1 + 2 *(19);
	pinpoint_message( "warning - %%used/%%unused have been deprecated" );
			checking_used = 2; yy_start = 1 + 2 *(19);
			}
	break;
case 11:
# 122 "scan.l"
{





			++linenum;
			}
	break;
case 12:
# 132 "scan.l"
	break;
case 13:
# 133 "scan.l"
{
			++linenum;
			xlation =
			    (int *) malloc( sizeof( int ) * (unsigned) csize );

			if ( ! xlation )
			    flexfatal(
				"dynamic memory failure building %t table" );

			for ( i = 0; i < csize; ++i )
			    xlation[i] = 0;

			num_xlations = 0;

			yy_start = 1 + 2 *(21);
			}
	break;
case 14:
# 150 "scan.l"
synerr( "unrecognized '%' directive" );
	break;
case 15:
# 152 "scan.l"
{
			(void) strcpy( nmstr, (char *) yytext );
			didadef = 0;
			yy_start = 1 + 2 *(5);
			}
	break;
case 16:
# 158 "scan.l"
(void) strcpy( nmstr, (char *) yytext ); return ( 263 );;
	break;
case 17:
# 159 "scan.l"
++linenum;
	break;
case 18:
# 160 "scan.l"
++linenum; return ( '\n' );
	break;
case 19:
# 161 "scan.l"
synerr( "illegal character" ); yy_start = 1 + 2 *(13);
	break;
case 20:
# 164 "scan.l"
(void) fwrite( (char *) yytext, yyleng, 1, yyout ); yy_start = 1 + 2 *(0);
	break;
case 21:
# 165 "scan.l"
++linenum; (void) fwrite( (char *) yytext, yyleng, 1, yyout ); yy_start = 1 + 2 *(0);
	break;
case 22:
# 166 "scan.l"
(void) fwrite( (char *) yytext, yyleng, 1, yyout );
	break;
case 23:
# 167 "scan.l"
(void) fwrite( (char *) yytext, yyleng, 1, yyout );
	break;
case 24:
# 168 "scan.l"
++linenum; (void) fwrite( (char *) yytext, yyleng, 1, yyout );
	break;
case 25:
# 171 "scan.l"
++linenum; yy_start = 1 + 2 *(0);
	break;
case 26:
# 172 "scan.l"
(void) fwrite( (char *) yytext, yyleng, 1, yyout ); if ( all_upper( yytext ) ) reject = 1;;
	break;
case 27:
# 173 "scan.l"
(void) fwrite( (char *) yytext, yyleng, 1, yyout ); if ( all_lower( yytext ) ) yymore_used = 1;;
	break;
case 28:
# 174 "scan.l"
(void) fwrite( (char *) yytext, yyleng, 1, yyout );
	break;
case 29:
# 175 "scan.l"
{
			++linenum;
			(void) fwrite( (char *) yytext, yyleng, 1, yyout );
			if ( indented_code )
			    yy_start = 1 + 2 *(0);
			}
	break;
case 30:
# 184 "scan.l"
	break;
case 31:
# 185 "scan.l"
{
			(void) strcpy( (char *) nmdef, (char *) yytext );

			for ( i = strlen( (char *) nmdef ) - 1;
			      i >= 0 &&
			      nmdef[i] == ' ' || nmdef[i] == '\t';
			      --i )
			    ;

			nmdef[i + 1] = '\0';

                        ndinstal( nmstr, nmdef );
			didadef = 1;
			}
	break;
case 32:
# 200 "scan.l"
{
			if ( ! didadef )
			    synerr( "incomplete name definition" );
			yy_start = 1 + 2 *(0);
			++linenum;
			}
	break;
case 33:
# 207 "scan.l"
++linenum; yy_start = 1 + 2 *(0); (void) strcpy( nmstr, (char *) yytext ); return ( 263 );;
	break;
case 34:
# 210 "scan.l"
++linenum; yy_start = 1 + 2 *(0);
	break;
case 35:
# 212 "scan.l"
	break;
case 36:
# 212 "scan.l"
{
			if ( all_upper( yytext ) )
			    reject_really_used = checking_used;
			else
			    synerr( "unrecognized %used/%unused construct" );
			}
	break;
case 37:
# 218 "scan.l"
{
			if ( all_lower( yytext ) )
			    yymore_really_used = checking_used;
			else
			    synerr( "unrecognized %used/%unused construct" );
			}
	break;
case 38:
# 224 "scan.l"
synerr( "unrecognized %used/%unused construct" );
	break;
case 39:
# 227 "scan.l"
++linenum; yy_start = 1 + 2 *(0);
	break;
case 40:
# 228 "scan.l"
++num_xlations; new_xlation = 1;
	break;
case 41:
# 229 "scan.l"
synerr( "bad row in translation table" );
	break;
case 42:
# 231 "scan.l"
	break;
case 43:
# 232 "scan.l"
{
			xlation[myesc( yytext )] =
				(new_xlation ? num_xlations : -num_xlations);
			new_xlation = 0;
			}
	break;
case 44:
# 237 "scan.l"
{
			xlation[yytext[0]] =
				(new_xlation ? num_xlations : -num_xlations);
			new_xlation = 0;
			}
	break;
case 45:
# 243 "scan.l"
++linenum;
	break;
case 46:
*yy_cp = yy_hold_char;
yy_c_buf_p = yy_cp -= 1;
yytext = yy_bp; yyleng = yy_cp - yy_bp; yy_hold_char = *yy_cp; *yy_cp = '\0'; yy_c_buf_p = yy_cp;;
# 246 "scan.l"
{
			++linenum;
			fprintf( temp_action_file, "%s", yytext );
			fprintf( temp_action_file, "%%%% end of prolog\n" );;
			yy_start = 1 + 2 *(1);
			}
	break;
case 47:
# 253 "scan.l"
++linenum; fprintf( temp_action_file, "%s", yytext );
	break;
case (121 + 2 + 1):
# 255 "scan.l"
fprintf( temp_action_file, "%%%% end of prolog\n" );; return ( 0 );
	break;
case 49:
# 257 "scan.l"
++linenum;
	break;
case 50:
# 259 "scan.l"
{
			indented_code = (yytext[0] != '%');
			doing_codeblock = 1;
			bracelevel = 1;

			if ( indented_code )
			    fprintf( temp_action_file, "%s", yytext );

			yy_start = 1 + 2 *(20);
			}
	break;
case 51:
# 270 "scan.l"
yy_start = 1 + 2 *(6); return ( '<' );
	break;
case 52:
# 271 "scan.l"
return ( '^' );
	break;
case 53:
# 272 "scan.l"
yy_start = 1 + 2 *(9); return ( '"' );
	break;
case 54:
*yy_cp = yy_hold_char;
yy_c_buf_p = yy_cp = yy_bp + 1;
yytext = yy_bp; yyleng = yy_cp - yy_bp; yy_hold_char = *yy_cp; *yy_cp = '\0'; yy_c_buf_p = yy_cp;;
# 273 "scan.l"
yy_start = 1 + 2 *(8); return ( '{' );
	break;
case 55:
# 274 "scan.l"
yy_start = 1 + 2 *(14);
	break;
case 56:
*yy_cp = yy_hold_char;
yy_c_buf_p = yy_cp = yy_bp + 1;
yytext = yy_bp; yyleng = yy_cp - yy_bp; yy_hold_char = *yy_cp; *yy_cp = '\0'; yy_c_buf_p = yy_cp;;
# 275 "scan.l"
return ( '$' );
	break;
case 57:
# 277 "scan.l"
{
			bracelevel = 1;
			yy_start = 1 + 2 *(18);
			return ( '\n' );
			}
	break;
case 58:
# 282 "scan.l"
continued_action = 1; ++linenum; return ( '\n' );
	break;
case 59:
# 284 "scan.l"
{




			bracelevel = 0;
			continued_action = 0;
			yy_start = 1 + 2 *(12);
			return ( '\n' );
			}
	break;
case 60:
*yy_cp = yy_hold_char;
yy_c_buf_p = yy_cp -= 1;
yytext = yy_bp; yyleng = yy_cp - yy_bp; yy_hold_char = *yy_cp; *yy_cp = '\0'; yy_c_buf_p = yy_cp;;
# 295 "scan.l"
{
			bracelevel = 0;
			continued_action = 0;
			yy_start = 1 + 2 *(12);
			return ( '\n' );
			}
	break;
case 61:
# 302 "scan.l"
++linenum; return ( '\n' );
	break;
case 62:
# 304 "scan.l"
return ( 265 );
	break;
case 63:
# 306 "scan.l"
{
			sectnum = 3;
			yy_start = 1 + 2 *(3);
			return ( (-1) );
			}
	break;
case 64:
# 312 "scan.l"
{
			int cclval;

			(void) strcpy( nmstr, (char *) yytext );


			if ( (cclval = ccllookup( (unsigned char *) nmstr )) )
			    {
			    yylval = cclval;
			    ++cclreuse;
			    return ( 264 );
			    }
			else
			    {



			    cclinstal( (unsigned char *) nmstr, lastccl + 1 );




			    for ( i = strlen( (char *) ((unsigned char *) nmstr) ) - 1; i >= 1; --i ) yyunput( ((unsigned char *) nmstr)[i], yytext );

			    yy_start = 1 + 2 *(10);
			    return ( '[' );
			    }
			}
	break;
case 65:
# 341 "scan.l"
{
			register unsigned char *nmdefptr;
			unsigned char *ndlookup();

			(void) strcpy( nmstr, (char *) yytext );
			nmstr[yyleng - 1] = '\0';


			if ( ! (nmdefptr = ndlookup( nmstr + 1 )) )
			    synerr( "undefined {name}" );

			else
			    {
			    yyunput( ')', yytext );
			    for ( i = strlen( (char *) (nmdefptr) ) - 1; i >= 0; --i ) yyunput( (nmdefptr)[i], yytext );
			    yyunput( '(', yytext );
			    }
			}
	break;
case 66:
# 360 "scan.l"
return ( yytext[0] );
	break;
case 67:
# 361 "scan.l"
yylval = yytext[0]; return ( 257 );;
	break;
case 68:
# 362 "scan.l"
++linenum; return ( '\n' );
	break;
case 69:
# 365 "scan.l"
return ( ',' );
	break;
case 70:
# 366 "scan.l"
yy_start = 1 + 2 *(1); return ( '>' );
	break;
case 71:
*yy_cp = yy_hold_char;
yy_c_buf_p = yy_cp = yy_bp + 1;
yytext = yy_bp; yyleng = yy_cp - yy_bp; yy_hold_char = *yy_cp; *yy_cp = '\0'; yy_c_buf_p = yy_cp;;
# 367 "scan.l"
yy_start = 1 + 2 *(7); return ( '>' );
	break;
case 72:
# 368 "scan.l"
(void) strcpy( nmstr, (char *) yytext ); return ( 263 );;
	break;
case 73:
# 369 "scan.l"
synerr( "bad start condition name" );
	break;
case 74:
# 371 "scan.l"
yy_start = 1 + 2 *(1); return ( '^' );
	break;
case 75:
# 374 "scan.l"
yylval = yytext[0]; return ( 257 );;
	break;
case 76:
# 375 "scan.l"
yy_start = 1 + 2 *(1); return ( '"' );
	break;
case 77:
# 377 "scan.l"
{
			synerr( "missing quote" );
			yy_start = 1 + 2 *(1);
			++linenum;
			return ( '"' );
			}
	break;
case 78:
*yy_cp = yy_hold_char;
yy_c_buf_p = yy_cp = yy_bp + 1;
yytext = yy_bp; yyleng = yy_cp - yy_bp; yy_hold_char = *yy_cp; *yy_cp = '\0'; yy_c_buf_p = yy_cp;;
# 385 "scan.l"
yy_start = 1 + 2 *(11); return ( '^' );
	break;
case 79:
*yy_cp = yy_hold_char;
yy_c_buf_p = yy_cp = yy_bp + 1;
yytext = yy_bp; yyleng = yy_cp - yy_bp; yy_hold_char = *yy_cp; *yy_cp = '\0'; yy_c_buf_p = yy_cp;;
# 386 "scan.l"
return ( '^' );
	break;
case 80:
# 387 "scan.l"
yy_start = 1 + 2 *(11); yylval = '-'; return ( 257 );
	break;
case 81:
# 388 "scan.l"
yy_start = 1 + 2 *(11); yylval = yytext[0]; return ( 257 );;
	break;
case 82:
*yy_cp = yy_hold_char;
yy_c_buf_p = yy_cp = yy_bp + 1;
yytext = yy_bp; yyleng = yy_cp - yy_bp; yy_hold_char = *yy_cp; *yy_cp = '\0'; yy_c_buf_p = yy_cp;;
# 390 "scan.l"
return ( '-' );
	break;
case 83:
# 391 "scan.l"
yylval = yytext[0]; return ( 257 );;
	break;
case 84:
# 392 "scan.l"
yy_start = 1 + 2 *(1); return ( ']' );
	break;
case 85:
# 395 "scan.l"
{
			yylval = myctoi( yytext );
			return ( 258 );
			}
	break;
case 86:
# 400 "scan.l"
return ( ',' );
	break;
case 87:
# 401 "scan.l"
yy_start = 1 + 2 *(1); return ( '}' );
	break;
case 88:
# 403 "scan.l"
{
			synerr( "bad character inside {}'s" );
			yy_start = 1 + 2 *(1);
			return ( '}' );
			}
	break;
case 89:
# 409 "scan.l"
{
			synerr( "missing }" );
			yy_start = 1 + 2 *(1);
			++linenum;
			return ( '}' );
			}
	break;
case 90:
# 417 "scan.l"
synerr( "bad name in {}'s" ); yy_start = 1 + 2 *(1);
	break;
case 91:
# 418 "scan.l"
synerr( "missing }" ); ++linenum; yy_start = 1 + 2 *(1);
	break;
case 92:
# 421 "scan.l"
bracelevel = 0;
	break;
case 93:
# 422 "scan.l"
{
			fprintf( temp_action_file, "%s", yytext );
			if ( all_upper( yytext ) ) reject = 1;;
			}
	break;
case 94:
# 426 "scan.l"
{
			fprintf( temp_action_file, "%s", yytext );
			if ( all_lower( yytext ) ) yymore_used = 1;;
			}
	break;
case 95:
# 430 "scan.l"
fprintf( temp_action_file, "%s", yytext );
	break;
case 96:
# 431 "scan.l"
{
			++linenum;
			fprintf( temp_action_file, "%s", yytext );
			if ( bracelevel == 0 ||
			     (doing_codeblock && indented_code) )
			    {
			    if ( ! doing_codeblock )
				fputs( "\tYY_BREAK\n", temp_action_file );

			    doing_codeblock = 0;
			    yy_start = 1 + 2 *(1);
			    }
			}
	break;

case 97:
# 447 "scan.l"
fprintf( temp_action_file, "%s", yytext ); ++bracelevel;
	break;
case 98:
# 448 "scan.l"
fprintf( temp_action_file, "%s", yytext ); --bracelevel;
	break;
case 99:
# 449 "scan.l"
fprintf( temp_action_file, "%s", yytext );
	break;
case 100:
# 450 "scan.l"
fprintf( temp_action_file, "%s", yytext );
	break;
case 101:
# 451 "scan.l"
fprintf( temp_action_file, "%s", yytext ); yy_start = 1 + 2 *(16);
	break;
case 102:
# 452 "scan.l"
fprintf( temp_action_file, "%s", yytext );
	break;
case 103:
# 453 "scan.l"
fprintf( temp_action_file, "%s", yytext ); yy_start = 1 + 2 *(17);
	break;
case 104:
# 454 "scan.l"
{
			++linenum;
			fprintf( temp_action_file, "%s", yytext );
			if ( bracelevel == 0 )
			    {
			    fputs( "\tYY_BREAK\n", temp_action_file );
			    yy_start = 1 + 2 *(1);
			    }
			}
	break;
case 105:
# 463 "scan.l"
fprintf( temp_action_file, "%s", yytext );
	break;
case 106:
# 465 "scan.l"
fprintf( temp_action_file, "%s", yytext ); yy_start = 1 + 2 *(12);
	break;
case 107:
# 466 "scan.l"
fprintf( temp_action_file, "%s", yytext );
	break;
case 108:
# 467 "scan.l"
fprintf( temp_action_file, "%s", yytext );
	break;
case 109:
# 468 "scan.l"
++linenum; fprintf( temp_action_file, "%s", yytext );
	break;
case 110:
# 469 "scan.l"
fprintf( temp_action_file, "%s", yytext );
	break;
case 111:
# 471 "scan.l"
fprintf( temp_action_file, "%s", yytext );
	break;
case 112:
# 472 "scan.l"
fprintf( temp_action_file, "%s", yytext );
	break;
case 113:
# 473 "scan.l"
++linenum; fprintf( temp_action_file, "%s", yytext );
	break;
case 114:
# 474 "scan.l"
fprintf( temp_action_file, "%s", yytext ); yy_start = 1 + 2 *(12);
	break;
case 115:
# 475 "scan.l"
fprintf( temp_action_file, "%s", yytext );
	break;
case (121 + 12 + 1):
case (121 + 16 + 1):
case (121 + 17 + 1):
# 477 "scan.l"
{
			synerr( "EOF encountered inside an action" );
			return ( 0 );
			}
	break;
case 117:
# 483 "scan.l"
{
			yylval = myesc( yytext );
			return ( 257 );
			}
	break;
case 118:
# 488 "scan.l"
{
			yylval = myesc( yytext );
			yy_start = 1 + 2 *(11);
			return ( 257 );
			}
	break;
case 119:
# 495 "scan.l"
(void) fwrite( (char *) yytext, yyleng, 1, yyout );
	break;
case 120:
# 496 "scan.l"
do { (void) fputs( "flex scanner jammed", (&__stderr) ); (void) (--((&__stderr))->_count >= 0 ? (int) (*((&__stderr))->_ptr++ = ('\n')) : __flushbuf(('\n'),((&__stderr)))); exit( 1 ); } while ( 0 );
	break;
case (121 + 0 + 1):
case (121 + 1 + 1):
case (121 + 3 + 1):
case (121 + 4 + 1):
case (121 + 5 + 1):
case (121 + 6 + 1):
case (121 + 7 + 1):
case (121 + 8 + 1):
case (121 + 9 + 1):
case (121 + 10 + 1):
case (121 + 11 + 1):
case (121 + 13 + 1):
case (121 + 14 + 1):
case (121 + 15 + 1):
case (121 + 18 + 1):
case (121 + 19 + 1):
case (121 + 20 + 1):
case (121 + 21 + 1):
    return ( 0 );

	    case 121:
		{

		int yy_amount_of_matched_text = yy_cp - yytext - 1;


		*yy_cp = yy_hold_char;







		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )

		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yytext + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();










		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yytext + 0;

		    if ( yy_next_state )
			{

			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case 1:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {








			    yy_c_buf_p = yytext + 0;

			    yy_act = (121 + (yy_start - 1) / 2 + 1);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				do { yy_init_buffer( yy_current_buffer, yyin ); yy_load_buffer_state(); } while ( 0 );
			    }
			}
			break;

		    case 0:
			yy_c_buf_p = yytext + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yytext + 0;
			goto yy_match;

		    case 2:
			yy_c_buf_p =
			    &yy_current_buffer->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yytext + 0;
			goto yy_find_action;
		    }
		break;
		}

	    default:



		
do { (void) fputs( "fatal flex scanner internal error--no action found", (&__stderr) ); (void) (--((&__stderr))->_count >= 0 ? (int) (*((&__stderr))->_ptr++ = ('\n')) : __flushbuf(('\n'),((&__stderr)))); exit( 1 ); } while ( 0 );
	    }
	}
    }













static int yy_get_next_buffer()

    {
    register unsigned char *dest = yy_current_buffer->yy_ch_buf;
    register unsigned char *source = yytext - 1;
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
	
do { (void) fputs( "fatal flex scanner internal error--end of buffer missed", (&__stderr) ); (void) (--((&__stderr))->_count >= 0 ? (int) (*((&__stderr))->_ptr++ = ('\n')) : __flushbuf(('\n'),((&__stderr)))); exit( 1 ); } while ( 0 );




    number_to_move = yy_c_buf_p - yytext;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( yy_current_buffer->yy_eof_status != 0 )



	yy_n_chars = 0;

    else
	{
	int num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1;

	if ( num_to_read > 8192 )
	    num_to_read = 8192;

	else if ( num_to_read <= 0 )
	    do { (void) fputs( "fatal error - scanner input buffer overflow", (&__stderr) ); (void) (--((&__stderr))->_count >= 0 ? (int) (*((&__stderr))->_ptr++ = ('\n')) : __flushbuf(('\n'),((&__stderr)))); exit( 1 ); } while ( 0 );


	
if ( (yy_n_chars = read( ((yyin)->_fd), (char *) (&yy_current_buffer->yy_ch_buf[number_to_move]), num_to_read )) < 0 ) do { (void) fputs( "read() in flex scanner failed", (&__stderr) ); (void) (--((&__stderr))->_count >= 0 ? (int) (*((&__stderr))->_ptr++ = ('\n')) : __flushbuf(('\n'),((&__stderr)))); exit( 1 ); } while ( 0 );;
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move == 1 )
	    {
	    ret_val = 1;
	    yy_current_buffer->yy_eof_status = 2;
	    }

	else
	    {
	    ret_val = 2;
	    yy_current_buffer->yy_eof_status = 1;
	    }
	}

    else
	ret_val = 0;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = 0;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = 0;







    yytext = &yy_current_buffer->yy_ch_buf[1];

    return ( ret_val );
    }








static yy_state_type yy_get_previous_state()

    {
    register yy_state_type yy_current_state;
    register unsigned char *yy_cp;

    register unsigned char *yy_bp = yytext;

    yy_current_state = yy_start;
    if ( yy_bp[-1] == '\n' )
	++yy_current_state;

    for ( yy_cp = yytext + 0; yy_cp < yy_c_buf_p; ++yy_cp )
	{
	register unsigned char yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 341 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	}

    return ( yy_current_state );
    }









static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )





    {
    register int yy_is_jam;
    register unsigned char *yy_cp = yy_c_buf_p;

    register unsigned char yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 341 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 340);

    return ( yy_is_jam ? 0 : yy_current_state );
    }



static void yyunput( unsigned char c, register unsigned char *yy_bp )






    {
    register unsigned char *yy_cp = yy_c_buf_p;


    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	{
	register int number_to_move = yy_n_chars + 2;
	register unsigned char *dest =
	    &yy_current_buffer->yy_ch_buf[yy_current_buffer->yy_buf_size + 2];
	register unsigned char *source =
	    &yy_current_buffer->yy_ch_buf[number_to_move];

	while ( source > yy_current_buffer->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = yy_current_buffer->yy_buf_size;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	    do { (void) fputs( "flex scanner push-back overflow", (&__stderr) ); (void) (--((&__stderr))->_count >= 0 ? (int) (*((&__stderr))->_ptr++ = ('\n')) : __flushbuf(('\n'),((&__stderr)))); exit( 1 ); } while ( 0 );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;




    yytext = yy_bp; yyleng = yy_cp - yy_bp; yy_hold_char = *yy_cp; *yy_cp = '\0'; yy_c_buf_p = yy_cp;;
    }





static int input()


    {
    int c;
    unsigned char *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == 0 )
	{




	if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )

	    *yy_c_buf_p = '\0';

	else
	    {
	    yytext = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case 1:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yytext + 0;
			return ( (-1) );
			}

		    do { yy_init_buffer( yy_current_buffer, yyin ); yy_load_buffer_state(); } while ( 0 );




		    return ( input() );

		    }
		    break;

		case 0:
		    yy_c_buf_p = yytext + 0;
		    break;

		case 2:



		    do { (void) fputs( "unexpected last match in input()", (&__stderr) ); (void) (--((&__stderr))->_count >= 0 ? (int) (*((&__stderr))->_ptr++ = ('\n')) : __flushbuf(('\n'),((&__stderr)))); exit( 1 ); } while ( 0 );

		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }



void yyrestart( FILE *input_file )





    {
    yy_init_buffer( yy_current_buffer, input_file );
    yy_load_buffer_state();
    }



void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )





    {
    if ( yy_current_buffer == new_buffer )
	return;

    if ( yy_current_buffer )
	{

	*yy_c_buf_p = yy_hold_char;
	yy_current_buffer->yy_buf_pos = yy_c_buf_p;
	yy_current_buffer->yy_n_chars = yy_n_chars;
	}

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();






    yy_did_buffer_switch_on_eof = 1;
    }



void yy_load_buffer_state( void )




    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }



YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )






    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	do { (void) fputs( "out of dynamic memory in yy_create_buffer()", (&__stderr) ); (void) (--((&__stderr))->_count >= 0 ? (int) (*((&__stderr))->_ptr++ = ('\n')) : __flushbuf(('\n'),((&__stderr)))); exit( 1 ); } while ( 0 );

    b->yy_buf_size = size;




    b->yy_ch_buf = (unsigned char *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	do { (void) fputs( "out of dynamic memory in yy_create_buffer()", (&__stderr) ); (void) (--((&__stderr))->_count >= 0 ? (int) (*((&__stderr))->_ptr++ = ('\n')) : __flushbuf(('\n'),((&__stderr)))); exit( 1 ); } while ( 0 );

    yy_init_buffer( b, file );

    return ( b );
    }



void yy_delete_buffer( YY_BUFFER_STATE b )





    {
    if ( b == yy_current_buffer )
	yy_current_buffer = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }



void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )






    {
    b->yy_input_file = file;





    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;





    b->yy_ch_buf[1] = 0;
    b->yy_ch_buf[2] = 0;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = 0;
    }
# 499 "scan.l"
int yywrap()

    {
    if ( --num_input_files > 0 )
	{
	set_input_file( *++input_files );
	return ( 0 );
	}

    else
	return ( 1 );
    }




void set_input_file( file )
char *file;

    {
    if ( file )
	{
	infilename = file;
	yyin = fopen( infilename, "r" );

	if ( yyin == ((void *) 0) )
	    lerrsf( "can't open %s", file );
	}

    else
	{
	yyin = (&__stdin);
	infilename = "<stdin>";
	}
    }
